div.stat-block
  h5=creature[:name]
  .type
    | #{creature[:size_class].capitalize}
    |  #{creature[:type]}
    | #{creature[:keywords] ? " (#{creature[:keywords].join(', ')})" : ''}
    |, #{creature[:alignment]}

  .bar

  .ac
    span.b> Armor Class
    = creature[:ac].to_s + (creature[:armor] ? " #{creature[:armor].join(', ')}" : '')
  .hp
    span.b> Hit Points
    | #{avg(creature[:hd])} (#{creature[:hd]})
  .speed
    span.b> Speed
    = creature[:speed].map { |mode, speed| "#{mode unless mode == 'walk'} #{speed} ft."}.join(', ')

  .bar

  .ability_scores.flex
    - creature[:ability_scores].each do |key, val|
      .ability
        =key.upcase
        .score
          =val
          span.modifier<
            | (#{'%+d' % mod(val)})

  .bar

  - if creature[:skills]
    .skills.hang
      span.b> Skills
      = creature[:skills].map { |skill, bonus| "#{titleize(skill)} #{'%+d' % bonus}" }.join(', ')
      = " #{creature[:append][:skills]}" if creature[:append] && creature[:append][:skills]

  - if creature[:vulnerability]
    .vulnerability.hang
      span.b> Damage Vulnerabilities
      = creature[:vulnerability].join(', ')

  - if creature[:resistance]
    .resistance.hang
      span.b> Damage Resistances
      = [creature[:resistance].select { |type| !type.include?(',') }.join(', '), creature[:resistance].select { |type| type.include?(',') }].select { |part| !part.blank? }.join('; ')

  - if creature[:damage_immunity]
    .damage-immunity.hang
      span.b> Damage Immunities
      = creature[:damage_immunity].select { |type| !type.include?(',') }.join(', ')
      = "; #{creature[:damage_immunity].select { |type| type.include?(',') }.join('; ')}" unless creature[:damage_immunity].select { |type| type.include?(',') }.empty?

  - if creature[:condition_immunity]
    .condition-immunity.hang
      span.b> Condition Immunities
      = creature[:condition_immunity].join(', ')

  - if creature[:senses]
    .senses.hang
      span.b> Senses
      = creature[:senses].map { |sense, range| "#{sense} #{range} ft." }.join(', ')

  .languages.hang
    span.b> Languages
    = creature[:languages].blank? ? '&mdash;' : creature[:languages].map(&:capitalize).join(', ')

  .challenge
    //span.b> Challenge
    //= creature[:cr]

  .bar
  - if creature[:features]
    .features
      - creature[:features].each do |title, text|
        .feature
          span.subhead> #{titleize(title)}.
          = text[0]
        - text[1..].each do |more|
          p #{more}
  - if creature[:spellcasting]
    .features
      .feature
        span.subhead> Spellcasting.
        | #{creature[:spellcasting][:intro]} Spellcasting ability is #{ability_name(creature[:spellcasting][:ability])} (spell save DC #{creature[:spellcasting][:dc]}, #{'%+d' % creature[:spellcasting][:attack]} to hit with spell attacks). #{creature[:spellcasting][:outro]}
        - creature[:spellcasting][:spells].each_with_index do |spells, level|
          .spells
            = level == 0 ? "Cantrips (at will):" : "#{ordinal(level)} level (#{creature[:spellcasting][:slots][level]} slots):"
            - spells.join(', ').split(' ').each do |spell|
              span.spell<=spell

  .actions
    h6 Actions
    - creature[:actions].each do |title, action|
      .action
        span.subhead> #{[titleize(title), ('(' + action[:recharge] + ')' if action[:recharge])].compact.join(' ')}.
        - if action[:attack]
          span.i>
              = [('Melee' if action[:melee]), ('Ranged' if action[:ranged])].compact.join(' or ')
              |  #{('Weapon' if action[:weapon])} Attack.
          | #{'%+d' % action[:hit]} to hit,
          = [(' reach ' + action[:reach].to_s + ' ft.' if action[:reach]), (' range ' + action[:range].join('/') + ' ft.' if action[:range])].compact.join(' or')
          |, one target.
          span.i<> Hit:
          | #{avg(action[:damage])} (#{action[:damage]}) #{action[:damage_type]} damage
          - if action[:extra]
            = ', ' + action[:extra][0]
            - action[:extra][1..].each do |text|
              p=text
          - else
            |.
        - else
          = action[:text]
